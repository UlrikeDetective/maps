Highlighting Countries on a Map with Leaflet Js
Felipe Limeira üåç
Felipe Limeira üåç

¬∑
Follow

5 min read
¬∑
Oct 18, 2024
4







Interactive maps are powerful tools for visualizing geographical data, enabling users to explore regions, understand spatial relationships, and gain insights through dynamic interactions.

In this article, we‚Äôll walk through how to create an interactive map using Leaflet, a popular open-source JavaScript library for mobile-friendly maps.

Specifically, we‚Äôll focus on highlighting South American countries on hover and allowing users to zoom into a country by clicking on it.

We‚Äôll break down the provided code, explain each component, and ensure all comments are in English for clarity.

I shared the repository in the final

Leaflet - an open-source JavaScript library for interactive maps
Leaflet is a modern, lightweight open-source JavaScript library for mobile-friendly interactive maps.
leafletjs.com

Introduction to Leaflet
Leaflet.js is a lightweight, open-source JavaScript library for creating interactive maps.

It‚Äôs renowned for its simplicity, performance, and extensive plugin ecosystem, making it a go-to choice for developers looking to embed maps into their web applications.

Leaflet supports a variety of mapping providers and offers features like panning, zooming, marker placement, and layer control, which can be extended further with GeoJSON data for advanced functionalities.

In this tutorial, we‚Äôll leverage Leaflet.js to display a map of South America, enhance user interactions by highlighting countries on hover, and enable zooming into specific countries upon user clicks.

Setting Up the HTML Structure
We‚Äôll begin by setting up the basic HTML structure required for our map. This includes linking the necessary CSS and JavaScript libraries and creating containers for the main map and an optional minimap.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Leaflet with Manual MiniMap</title>
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link rel="stylesheet" href="style.css" />
    <style>
        /* Styles for the main map */
        #map {
            height: 100vh;
            width: 100vw;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <div id="miniMap"></div>

    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <!-- Main Script -->
    <script src="main.js"></script>
</body>
</html>
Leaflet CSS and JS: These are linked via CDN to provide the necessary styles and functionalities for the map.
#map and #miniMap: Containers for the main map and an optional minimap. In this example, the minimap is present but not implemented in the JavaScript. You can enhance this further by integrating a minimap plugin or custom implementation.
Inline CSS: Basic styling ensures the map fills the entire viewport.
Styling the Map
While the inline CSS in index.html ensures the map occupies the full viewport, you can further customize the appearance using an external style.css file. For simplicity, the inline styles suffice for this example.

Implementing the Interactive Map with JavaScript
The core functionality of our interactive map resides in the main.js file. Let's break down each part of the script to understand how it works.

Initializing the Map
// Initialize the main map centered over Bras√≠lia, Brazil
const map = L.map('map').setView([-15.7801, -47.9292], 4);
Map Initialization: Creates a new Leaflet map instance targeting the #map container. It sets the initial view to Bras√≠lia, Brazil, with a zoom level of 4. Adjust the coordinates and zoom level as needed for your specific focus area.
Adding Tile Layers
// Main Map Tile Layer from OpenStreetMap
const tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '¬© OpenStreetMap contributors'
}).addTo(map);
Tile Layer: Adds a tile layer to the map using OpenStreetMap tiles. The {s}, {z}, {x}, and {y} are placeholders for subdomains, zoom level, and tile coordinates, respectively.
Attribution: Properly attributes the map data source, which is essential for compliance with OpenStreetMap‚Äôs usage policies.
Adding to Map: The .addTo(map) method attaches the tile layer to our Leaflet map instance.
Styling GeoJSON Features
// Style for countries on the main map
function style(feature) {
    return {
        fillColor: 'gray',
        weight: 1,
        opacity: 1,
        color: 'black',
        fillOpacity: 0.4
    };
}
Style Function: Defines the visual appearance of GeoJSON features (countries in this case). Each country will have a gray fill with 40% opacity, black borders with a weight of 1 pixel, and full opacity for borders.
Customization: You can modify these properties to match your design preferences, such as changing colors, border weights, or opacities.
Highlighting Countries on Hover
// Highlight a country on hover
function highlightFeature(e) {
    const layer = e.target;
    layer.setStyle({
        weight: 5,
        color: 'red',
        fillColor: 'red',
        dashArray: '',
        fillOpacity: 0.5
    });

    // Bring the layer to the front to ensure the highlight is visible
    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
        layer.bringToFront();
    }
}
Highlight Function: When a user hovers over a country, this function increases the border weight to 5 pixels, changes the border and fill colors to red, and adjusts the fill opacity to 50% for a more pronounced highlight.
Layer Ordering: The bringToFront() method ensures that the highlighted country appears above other layers, preventing it from being obscured.
Resetting Highlight on Mouseout
// Reset the country's style when the mouse leaves
function resetHighlight(e) {
    geojson.resetStyle(e.target);
}
Reset Function: Reverts the country‚Äôs style to its original state when the mouse is no longer hovering over it. This ensures that only the currently hovered country remains highlighted.
Zooming into a Country on Click
// Zoom into the clicked country
function zoomToFeature(e) {
    map.fitBounds(e.target.getBounds(), { padding: [50, 50] });
}
Zoom Function: When a user clicks on a country, the map zooms into that country by fitting the map‚Äôs bounds to the country‚Äôs geographical boundaries. The padding option adds space around the country to ensure it's well-framed within the viewport.
Adding Event Listeners to Each Feature
// Define events for each feature (country)
function onEachFeature(feature, layer) {
    layer.on({
        mouseover: highlightFeature,
        mouseout: resetHighlight,
        click: zoomToFeature
    });
}
Event Binding: Attaches event listeners to each country feature. Specifically:
mouseover: Triggers the highlight function when the mouse hovers over a country.
mouseout: Resets the country's style when the mouse leaves.
click: Zooms into the country when clicked.
Adding GeoJSON Data to the Map
// Add GeoJSON data to the main map
let geojson;
fetch('data/south-america.geojson')
    .then(response => response.json())
    .then(data => {
        geojson = L.geoJson(data, {
            style: style,
            onEachFeature: onEachFeature
        }).addTo(map);
    })
    .catch(error => {
        console.error('Error loading GeoJSON on the Main Map:', error);
    });
Fetching GeoJSON Data: Retrieves the south-america.geojson file containing the geographical data for South American countries.
Creating GeoJSON Layer: Uses L.geoJson to create a new GeoJSON layer with the fetched data, applying the defined style and onEachFeature functions to each feature.
Adding to Map: The resulting GeoJSON layer is added to the Leaflet map instance.
Error Handling: Catches and logs any errors that occur during the fetching or processing of the GeoJSON data.
By utilizing Leaflet.js, we‚Äôve created an interactive map that not only displays South American countries but also enhances user engagement through dynamic highlighting and zooming functionalities.

This foundational setup can be expanded with additional features such as tooltips, popups, legends, and integration with other data sources to create comprehensive geographical applications.

Additional Enhancements
Tooltips and Popups: Display additional information about each country when hovered over or clicked.
Minimap Integration: Implement a minimap using Leaflet plugins like Leaflet-MiniMap for better navigation.
Responsive Design: Ensure the map layout adapts seamlessly to various screen sizes and devices.
Data Overlays: Incorporate real-time data, such as population statistics or economic indicators, to provide deeper insights.
